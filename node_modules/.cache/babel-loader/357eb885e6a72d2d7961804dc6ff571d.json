{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shipra/Desktop/quotegenrator/src/Quotes.js\";\n// import logo from './logo.svg';\nimport React from 'react';\nimport './Quotes.scss';\n\nclass Quotes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callNewQoute = () => {\n      let colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', '#472E32', '#BDBB99', '#77B1A9', '#73A857'];\n      this.setState({\n        randomNo: Math.floor(Math.random() * this.state.quotesArry.length),\n        color: colors[Math.floor(Math.random() * colors.length)]\n      });\n    };\n\n    this.state = {\n      randomNo: 0,\n      quotesArry: [],\n      color: \"#16a085\"\n    };\n    this.callNewQoute = this.callNewQoute.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://type.fit/api/quotes\").then(resp => resp.json()).then(result => {\n      this.setState({\n        quotesArry: result\n      });\n    }, error => console.log(error));\n  }\n\n  render() {\n    const {\n      quotesArry,\n      randomNo,\n      color\n    } = this.state;\n    console.log(this.state.color);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      style: {\n        backgroundColor: `${color}`\n      },\n      children: quotesArry[randomNo] && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quote-box\",\n        className: \"quotebox\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"text\",\n          className: \"text\",\n          style: {\n            color: `${color}`\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-quote-left\",\n            style: {\n              color: `${color}`\n            },\n            children: [\"  \", quotesArry[randomNo].text, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 67\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this), quotesArry[randomNo].author ? /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"author\",\n          className: \"author\",\n          children: [\"  - \", quotesArry[randomNo].author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 40\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 113\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_top\",\n          href: `https://twitter.com/intent/tweet?hashtags=quotes&text=${quotesArry[randomNo].text}`,\n          style: {\n            backgroundColor: `${color}`\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-twitter\",\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 157\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.callNewQoute,\n          style: {\n            backgroundColor: `${color}`\n          },\n          id: \"new-quote\",\n          className: \"newQuote\",\n          children: \" New Qoute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Quotes;","map":{"version":3,"sources":["/Users/shipra/Desktop/quotegenrator/src/Quotes.js"],"names":["React","Quotes","Component","constructor","props","callNewQoute","colors","setState","randomNo","Math","floor","random","state","quotesArry","length","color","bind","componentDidMount","fetch","then","resp","json","result","error","console","log","render","backgroundColor","text","author"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport './Quotes.scss';\nclass Quotes extends React.Component{\nconstructor(props){\n  super(props)\n  this.state={\n    randomNo:0,\n    quotesArry:[],\n    color:\"#16a085\",\n  }\n  this.callNewQoute=this.callNewQoute.bind(this);\n}\ncomponentDidMount(){\n  fetch(\"https://type.fit/api/quotes\")\n  .then(resp=>resp.json ())\n  .then(result =>{\n    this.setState({quotesArry:result})\n  },(error)=>console.log(error)\n  );\n}\ncallNewQoute=()=>{\n  let colors = [\n    '#16a085',\n    '#27ae60',\n    '#2c3e50',\n    '#f39c12',\n    '#e74c3c',\n    '#9b59b6',\n    '#FB6964',\n    '#342224',\n    '#472E32',\n    '#BDBB99',\n    '#77B1A9',\n    '#73A857'\n  ];\n  this.setState({\n    randomNo:Math.floor(Math.random()*this.state.quotesArry.length),\n    color:colors[Math.floor(Math.random()*colors.length)]\n  })\n}\nrender(){\nconst {quotesArry,randomNo,color}=this.state;\nconsole.log(this.state.color)\nreturn (\n  <div className=\"wrapper\" style={{backgroundColor:`${color}`}}>\n    \n    {quotesArry[randomNo] && (\n      \n      <div id=\"quote-box\" className=\"quotebox\">\n       \n        <p id=\"text\" className=\"text\" style={{color:`${color}`}}> <i className=\"fa fa-quote-left\" style={{color:`${color}`}}>  {quotesArry[randomNo].text} </i></p>\n        \n        { quotesArry[randomNo].author? <p id=\"author\" className=\"author\">  - {quotesArry[randomNo].author}</p>: <p  className=\"author\"></p>}\n       \n        <a target=\"_top\" href={`https://twitter.com/intent/tweet?hashtags=quotes&text=${quotesArry[randomNo].text}`} style={{backgroundColor:`${color}`}} > <i className=\"fa fa-twitter\"> </i></a>\n        \n        <button onClick={this.callNewQoute}  style={{backgroundColor:`${color}`}} id=\"new-quote\" className=\"newQuote\"> New Qoute</button>\n    \n    </div>)}\n  \n  </div>)}\n\n}\n  \nexport default Quotes;\n"]},"metadata":{},"sourceType":"module"}